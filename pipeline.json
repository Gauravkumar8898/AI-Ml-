{
  "components": {
    "comp-decision-classifier": {
      "executorLabel": "exec-decision-classifier"
    },
    "comp-manage-data": {
      "executorLabel": "exec-manage-data"
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-decision-classifier": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "decision_classifier"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn==1.3.2' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef decision_classifier():\n    import logging\n    import pickle\n    import numpy as np\n    from sklearn.model_selection import train_test_split\n    from sklearn.tree import DecisionTreeClassifier\n    X = np.load(f\"src/data/x.npy\", allow_pickle=True)\n    y = np.load(f\"src/data/y.npy\", allow_pickle=True)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n    model = DecisionTreeClassifier().fit(X_train, y_train)\n    logging.info(\"model is trained ...\")\n    with open(f\"src/data/model.pkl\" ,'w') as f:\n        pickle.dump(model, f)\n    logging.info(\"model saved\")\n\n"
          ],
          "image": "python:3.10"
        }
      },
      "exec-manage-data": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "manage_data"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.0.3' 'numpy==1.24.4' 'scikit-learn==1.3.2' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef manage_data():\n    from src.utils.constant import categorical_cols\n    data_gcs_path = \"gs://marine-might-413408/healthcare-dataset-stroke-data.csv\"\n    import logging\n    import pandas as pd\n\n    import numpy as np\n    dataset = pd.read_csv(data_gcs_path)\n    logging.info(\"reading data.....\")\n    df = pd.get_dummies(dataset, columns=categorical_cols)\n\n    # Replace NaNs with mean\n    df = df.fillna(df.mean())\n\n    # Separate features and labels\n    X, y = df.drop(columns=['id', 'stroke']), df['stroke'].values\n\n    # Split data into training set and test set\n    logging.info(\"train test split ...!\")\n\n    logging.info(\"data prepare complete\")\n    np.save(f\"src/data/x.npy\", X)\n    np.save(f\"src/data/y.npy\", y)\n\n"
          ],
          "image": "python:3.10"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "creating pipeline on the healthcare datatset",
    "name": "health-dataset"
  },
  "root": {
    "dag": {
      "tasks": {
        "decision-classifier": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-decision-classifier"
          },
          "dependentTasks": [
            "manage-data"
          ],
          "taskInfo": {
            "name": "decision-classifier"
          }
        },
        "manage-data": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-manage-data"
          },
          "taskInfo": {
            "name": "manage-data"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.7.0"
}